@{
    ViewData["Title"] = "Tree Image Capture";
}

<div class="text-center">
    <h1 class="display-4">Tree Image Capture</h1>
    <p>
        <video autoplay id="camera" width="640" height="480"></video>
    </p>
    <p>
        <label for"cameradelay">Camera Delay (ms):</label>
		<input name="cameradelay" id="cameradelay" type="number" value="200" /><br />
        <label for="direction">Direction: </label>
        <select name="direction" id="direction" type="number">
            <option value="0">0</option>
            <option value="45">45</option>
            <option value="90">90</option>
            <option value="135">135</option>
            <option value="180">180</option>
            <option value="225">225</option>
            <option value="270">270</option>
            <option value="315">315</option>
        </select><br /><input type="button" value="Capture Images" onclick="captureImages()" /><br />
        <br />
		<label>Progress:</label><span id="progress">0%</span>
    </p>
    <p>
        <canvas id="photo" style="display:none"></canvas>
    </p>
</div>
@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.js"></script>
    <script>
        const videoElement = document.getElementById('camera');
        const canvasElement = document.getElementById('photo');

        navigator.mediaDevices.getUserMedia({ video: true, audio: false })
            .then((stream) => {
                videoElement.srcObject = stream;
                videoElement.play();
            })
            .catch((error) => {
                console.error('Error accessing the camera.', error);
            });


        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/treehub")
            .configureLogging(signalR.LogLevel.Information)
            .build();
        connection.logging = true;

        connection.on("CaptureImage", (progress) => {
            canvasElement.width = videoElement.videoWidth;
            canvasElement.height = videoElement.videoHeight;
			const context = canvasElement.getContext('2d');
			context.drawImage(videoElement, 0, 0);
            $('#progress').html(progress + '%');
			return canvasElement.toDataURL('image/png');
        });

        var Start = async () => {
            try {
                await connection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.log(err);
                setTimeout(Start, 5000);
            }
        };

        // Start the connection.
        Start();

        connection.onclose(async () => {
            await Start();
        });

        function captureImages() {
            $.ajax({
                url: '@Url.Action("StartImageCapture", "ImageCapture")?connectionId=' + connection.connectionId + '&direction=' + $('#direction').val() + '&cameradelay=' + $('#cameradelay').val(),
                type: 'GET',
                success: function (data) {
                    alert('Done!');
                },
                error: function (error) {
                    alert(error.responseText);
                }
            });
        }
    </script>
}