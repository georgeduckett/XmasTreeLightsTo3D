@{
    ViewData["Title"] = "Image Processing";
}
@model TreeLightsWeb.Models.ImageProcessingModel

<div class="text-center">
    <h1 class="display-4">Image Processing</h1>
    <p>Configuration</p>
    <p>
		<label asp-for="BlurAmount">Blur Amount: </label>
		<input asp-for="BlurAmount" name="BlurAmount" id="BlurAmount" type="number" /><br />
		<label asp-for="BrightnessThreshold">Brightness Threshold: </label>
		<input asp-for="BrightnessThreshold" name="BrightnessThreshold" id="BrightnessThreshold" type="number" /><br />
		<label asp-for="MinPointsToKeep">Min Points To Keep: </label>
		<input asp-for="MinPointsToKeep" name="MinPointsToKeep" id="MinPointsToKeep" type="number" /><br />
		<label asp-for="MaxYDiffBetweenTreeRotations">Max Y Diff Between Tree Rotations: </label>
		<input asp-for="MaxYDiffBetweenTreeRotations" name="MaxYDiffBetweenTreeRotations" id="MaxYDiffBetweenTreeRotations" type="number" /><br />
		<label asp-for="ProportionToAssumeCorrectDistances">Proportion To Assume Correct Distances: </label>
		<input asp-for="ProportionToAssumeCorrectDistances" name="ProportionToAssumeCorrectDistances" id="ProportionToAssumeCorrectDistances" type="number" /><br />
        <label asp-for="UseCNativeLibrary">Use C-Native Library (windows only) for equation solving: </label>
        <input asp-for="UseCNativeLibrary" readonly="@(!Model.CouldUseCNativeLibrary ? "true" : "")" name="UseCNativeLibrary" id="UseCNativeLibrary" type="checkbox" /><br />
        <br />
        <br />
        <br />
		<label for="AngleImage">Angle Image: </label>
        <select name="AngleImage" id="AngleImage">
			<option value="0">0</option>
			<option value="1">45</option>
			<option value="2">90</option>
			<option value="3">135</option>
			<option value="4">180</option>
			<option value="5">225</option>
			<option value="6">270</option>
			<option value="7">315</option>
        </select>
        @for (var i = 0; i < 8; i++)
        {
            <span id="PerImage@(i)" style="display:none;">
                <br />
                <label asp-for="ImageMaskingModels[i].LeftBlank" for="LeftBlank@(i)">Left Blank: </label>
                <input asp-for="ImageMaskingModels[i].LeftBlank" name="LeftBlank@(i)" id="LeftBlank@(i)" type="range" min="0" max="99999" /><br />
                <label asp-for="ImageMaskingModels[i].RightBlank" for="RightBlank@(i)">Right Blank: </label>
                <input asp-for="ImageMaskingModels[i].RightBlank" name="RightBlank@(i)" id="RightBlank@(i)" type="range" min="0" max="99999" /><br />
            </span>
        }
    </p>
    <p>
        <canvas id="canvas"></canvas>
    </p>
    <p>
        <input type="button" value="Process Images" onclick="processImages()" />
    </p>
    <p><textarea id="output" rows="20" cols="150"></textarea></p>
    <p>
        <a asp-action="DownloadCoordinatesFile" asp-controller="ImageProcessing">Download Existing Coordinates File</a>
    </p>
    <form enctype="multipart/form-data" asp-action="UploadCoordinatesFile" asp-controller="ImageProcessing" method="post">
		<fieldset>
			<legend>Coordinates File</legend>
			<input type="file" name="coordinatesFile" id="coordinatesFile" />
			<button type="submit">Upload Coordinates File</button>
        </fieldset>
    </form>
    <hr />
    <a asp-action="CoordinateCorrection" asp-controller="ImageProcessing">Coordinate Correction (+ See the tree)</a>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.7/signalr.js"></script>
    <script>
        // Canvas / Image masking stuff
		var canvas = document.getElementById('canvas');
		var ctx = canvas.getContext('2d');
		var img = new Image();
        img.onload = function () {
            canvas.width = img.width;
            canvas.height = img.height;
            ctx.drawImage(img, 0, 0);
            $('#LeftBlank' + $('#AngleImage').val()).attr('max', img.width);
            $('#RightBlank' + $('#AngleImage').val()).attr('max', img.width);
            if ($('#RightBlank' + $('#AngleImage').val()).val() == 0) {
                $('#RightBlank' + $('#AngleImage').val()).val(img.width);
            }
            ctx.fillStyle = 'black';

            ctx.fillRect(0, 0, $('#LeftBlank' + $('#AngleImage').val()).val(), canvas.height);
            ctx.fillRect($('#RightBlank' + $('#AngleImage').val()).val(), 0, canvas.width, canvas.height);

            for (let i = 0; i < 8; i++) {
                $('#PerImage' + i).hide();
            }
            $('#PerImage' + $('#AngleImage').val()).show();
        };
		img.src = '/CapturedImages/AllOn_0.png';

        $('#AngleImage').on('change', function () {
            img.src = '/CapturedImages/AllOn_' + ($('#AngleImage').val() * 45) + '.png';
        });

        for (let i = 1; i < 8; i++) {
            $('#PerImage' + i).hide();
        }

        $('#PerImage' + $('#AngleImage').val()).show();

        for (let i = 0; i < 8; i++) {
            $('#LeftBlank' + i + ',#RightBlank' + i).on("input", function () {
                ctx.drawImage(img, 0, 0);
                ctx.fillStyle = 'black';
                ctx.fillRect(0, 0, $('#LeftBlank' + i).val(), canvas.height);
                ctx.fillRect($('#RightBlank' + i).val(), 0, canvas.width, canvas.height);
            });
        }


        // Image Processing Stuff
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/treehub")
            .configureLogging(signalR.LogLevel.Information)
            .build();
        connection.logging = true;


        function updateProgress(progress){
            var txt = $("#output");
            if(progress.startsWith('\r')){
                txt.val(txt.val().substring(0, txt.val().lastIndexOf("\n")) + progress.substring(1));
            }
            else{
                txt.val(txt.val() + "\n" + progress);
            }
            txt.scrollTop(txt[0].scrollHeight);
        }

        connection.on("UpdateProcessingProgress", updateProgress);

        var Start = async () => {
            try {
                await connection.start();
                console.log("SignalR Connected.");
            } catch (err) {
                console.log(err);
                setTimeout(Start, 5000);
            }
        };

        // Start the connection.
        Start();

        connection.onclose(async () => {
            await Start();
        });

        function processImages() {
            for (let i = 0; i < 8; i++) {
                if ($('#RightBlank' + i).val() == 0) {
                    $('#RightBlank' + i).attr('max', img.width);
                    $('#RightBlank' + i).val(img.width);
                }
            }

            var model = {
                BlurAmount: $('#BlurAmount').val(),
                BrightnessThreshold: $('#BrightnessThreshold').val(),
                MinPointsToKeep: $('#MinPointsToKeep').val(),
                MaxYDiffBetweenTreeRotations: $('#MaxYDiffBetweenTreeRotations').val(),
                ProportionToAssumeCorrectDistances: $('#ProportionToAssumeCorrectDistances').val(),
                ImageMaskingModels: [...Array(8).keys()].map(i => ({ LeftBlank: $('#LeftBlank' + i).val(), RightBlank: $('#RightBlank' + i).val() })),
				UseCNativeLibrary: $('#UseCNativeLibrary').is(':checked')
            };

            $.ajax({
                url: '@Url.Action("StartImageProcessing", "ImageProcessing")?connectionId=' + connection.connectionId,
                method: 'post',
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify(model),
                traditional: true,
                success: function (data) {
                    // TODO: Scroll to the bottom and show the tree
                    alert('Done');
                },
                error: function (error) {
					updateProgress('Error: ' + error.responseText);
                    alert(error.responseText);
                }
            });
        }
    </script>
}